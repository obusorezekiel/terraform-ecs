name: "End to End Deployment with GitHub Actions"

on:
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TERRAFORM_ACTION: destroy
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-sample-app           
  ECS_SERVICE: my_ecs_cluster_service 
  ECS_CLUSTER: my_ecs_cluster                 
  ECS_TASK_DEFINITION: infra/task-definition.json 
                                               
  CONTAINER_NAME: my_task 

jobs:

  configure_aws_credentials:
    name: Configure AWS Credentials
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ env.AWS_REGION }}

  # deploy_aws_infra:
  #   name: "Build Infra"
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ./infra
    
  #   steps:
  #     - name: Checkout to repository
  #       uses: actions/checkout@v2

  #     - name: Setup Terraform with specified version
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.4.0

  #     - name: Terraform init
  #       id: init
  #       run: terraform init

  #     - name: Terraform format
  #       id: fmt
  #       run: terraform fmt

  #     - name: Terraform validate
  #       id: validate
  #       run: terraform validate

  #     - name: Terraform plan
  #       id: plan
  #       run: terraform plan

  #     - name: Terraform apply/destroy
  #       id: apply-destroy
  #       run: terraform ${{ env.TERRAFORM_ACTION }} --auto-approve
    
  push_application_to_container:
    name: "Push Application"
    needs: 
      - configure_aws_credentials
      #- deploy_aws_infra
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./demo_node_app
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: company-z/amazon-ecs-deploy-task-definition@v1.0
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true




    
  
